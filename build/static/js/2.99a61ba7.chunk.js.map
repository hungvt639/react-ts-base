{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/logic/getProxyFormState.ts","../../src/useFormContext.tsx","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/useSubscribe.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/utils/remove.ts","../../src/utils/isFunction.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isString.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","_toConsumableArray","arr","arrayLikeToArray","iter","Object","from","unsupportedIterableToArray","element","type","data","Date","isObjectType","isNullOrUndefined","isDateObject","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","defineProperty","get","keys","formStateData","omit","isEmptyObject","find","tearDown","_unsubscribe","unsubscribe","useSubscribe","props","_updateSubscription","disabled","subject","subscribe","callback","updateSubscriptionProps","skipEarlySubscription","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","ref","focus","refs","cloneObject","Set","isFunction","createSubject","_observers","observer","subscription","tearDowns","add","push","teardown","createSubscription","subscriber","closed","createSubscriber","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","isCheckBoxInput","window","document","isHTMLElement","contains","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","isValid","validResult","options","values","option","checked","map","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","_fields","criteriaMode","shouldUseNativeValidation","mount","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","error","fieldName","join","foundError","pop","deepMerge","target","targetValue","sourceValue","setDirtyFields","defaultValues","dirtyFields","parentNode","parentName","isBlurEvent","isTouched","isSubmitted","reValidateMode","isString","RegExp","getValidateError","isMessage","validationData","isRegex","inputValue","a","inputRef","setCustomValidty","reportValidity","setCustomValidity","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","_options","_formState","isDirty","isValidating","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_defaultValues","_formValues","shouldUnregister","_stateFlags","action","watch","_names","unMount","array","timer","validateFields","_subjects","control","state","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","isFieldWatched","watchAll","has","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","_updateFieldArray","method","shouldSetValues","shouldSetFields","fieldValues","argA","argB","unsetEmptyArray","updateFieldArrayDirty","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","setFieldArrayDirtyFields","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","_removeUnmounted","live","unregister","getValues","_getWatch","isGlobal","convertToArrayPayload","_getFieldArray","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","handleChange","event","shouldSkipValidation","hasValidation","deps","skipValidation","isWatched","onBlur","onChange","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","all","shouldFocus","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","isNameInFieldArray","handleSubmit","onValid","onInvalid","preventDefault","persist","hasNoPromiseError","reset","formValues","keepStateOptions","hasUpdatedFormValues","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","useForm","_formControl","updateFormState","shouldRenderFormState","getProxyFormState"],"mappings":"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","file":"static/js/2.99a61ba7.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import * as React from 'react';\n\nimport { Subject, TearDown } from './utils/createSubject';\nimport { Noop } from './types';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n  skipEarlySubscription?: boolean;\n};\n\ntype Unsubscribe = { unsubscribe: TearDown };\n\ntype Payload<T> = {\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>;\n  props: Props<T>;\n};\n\nconst tearDown = (\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>,\n) => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps =\n  <T>({ _unsubscribe, props }: Payload<T>) =>\n  () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback,\n      });\n    }\n  };\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _unsubscribe = React.useRef<Unsubscribe>();\n  const _updateSubscription = React.useRef<Noop>(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props,\n  });\n\n  !props.skipEarlySubscription && _updateSubscription.current();\n\n  React.useEffect(() => {\n    _updateSubscription.current();\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = Noop;\n\nexport type Subscription = {\n  add: (tearDown: TearDown) => void;\n  unsubscribe: () => void;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: Noop;\n};\n\nfunction createSubscription() {\n  let tearDowns: TearDown[] = [];\n\n  const add = (tearDown: TearDown) => {\n    tearDowns.push(tearDown);\n  };\n\n  const unsubscribe = () => {\n    for (const teardown of tearDowns) {\n      teardown();\n    }\n    tearDowns = [];\n  };\n\n  return {\n    add,\n    unsubscribe,\n  };\n}\n\nfunction createSubscriber<T>(\n  observer: Observer<T>,\n  subscription: Subscription,\n): Observer<T> {\n  let closed = false;\n  subscription.add(() => (closed = true));\n\n  const next = (value: T) => {\n    if (!closed) {\n      observer.next(value);\n    }\n  };\n\n  return {\n    next,\n  };\n}\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>) => {\n    const subscription = createSubscription();\n    const subscriber = createSubscriber(observer, subscription);\n    _observers.push(subscriber);\n    return subscription;\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    control: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(\n        (fieldName) => (\n          isGlobal && _names.watch.add(fieldName as InternalFieldName),\n          get(fieldValues, fieldName as InternalFieldName)\n        ),\n      );\n\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender &&\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues,\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  React.useEffect(\n    () => () =>\n      Object.values(control._subjects).forEach((subject) =>\n        subject.unsubscribe(),\n      ),\n    [control],\n  );\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}
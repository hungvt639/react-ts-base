{"version":3,"sources":["screens/register/index.tsx","components/Error.tsx","utils/validate.ts"],"names":["Register","useForm","register","handleSubmit","getValues","useState","valiUsername","setValiUsername","valiPassword","setValiPassword","valiRePassword","setValiRePassword","valiEmail","setValiEmail","history","useHistory","data","a","console","log","username","password","checkRePassword","rePassword","validateEmail","email","API","user","res","message","success","push","LOGIN","errorAPI","className","onSubmit","type","name","placeholder","onChange","e","target","value","autoComplete","to","error","response","test","String","toLowerCase","repassword"],"mappings":"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","file":"static/js/14.dda064cb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { LOGIN } from \"../../router/const\";\r\nimport { checkRePassword, validateEmail } from \"../../utils/validate\";\r\nimport \"./register.scss\";\r\nimport API from \"../../api\";\r\nimport { DataRegister, ResponseRegister } from \"../../interface/api/UserAPI\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport { message } from \"antd\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { errorAPI } from \"../../components/Error\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\ninterface DataFormRegister extends DataRegister {\r\n    rePassword: string;\r\n}\r\n\r\nconst Register = () => {\r\n    const { register, handleSubmit, getValues } = useForm();\r\n\r\n    // const [username, setUsername] = useState<string>(\"\");\r\n    // const [password, setPassword] = useState<string>(\"\");\r\n    // const [rePassword, setRePassword] = useState<string>(\"\");\r\n    // const [email, setEmail] = useState<string>(\"\");\r\n    // const [first_name, setFirstName] = useState<string>(\"\");\r\n    // const [last_name, setLastName] = useState<string>(\"\");\r\n\r\n    const [valiUsername, setValiUsername] = useState<boolean>(false);\r\n    const [valiPassword, setValiPassword] = useState<boolean>(false);\r\n    const [valiRePassword, setValiRePassword] = useState<boolean>(false);\r\n    const [valiEmail, setValiEmail] = useState<boolean>(false);\r\n\r\n    const history = useHistory();\r\n\r\n    async function onSubmit(data: DataFormRegister) {\r\n        console.log(\"data\", data);\r\n\r\n        setValiUsername(!data.username);\r\n        setValiPassword(!data.password);\r\n        setValiRePassword(!checkRePassword(data.password, data.rePassword));\r\n        setValiEmail(!validateEmail(data.email));\r\n        if (\r\n            data.username &&\r\n            data.password &&\r\n            data.rePassword &&\r\n            data.email &&\r\n            validateEmail(data.email) &&\r\n            checkRePassword(data.password, data.rePassword)\r\n        ) {\r\n            try {\r\n                const res: AxiosResponse<ResponseRegister> =\r\n                    await API.user.register(data);\r\n                console.log(res);\r\n                message.success(\r\n                    \"Đăng ký tài khoản thành công, vui lòng đăng nhập để sử dụng dịch vụ\"\r\n                );\r\n                history.push(LOGIN);\r\n            } catch (err) {\r\n                errorAPI(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"register\">\r\n            <div className=\"forms_\">\r\n                <h1>Đăng ký</h1>\r\n                <form onSubmit={handleSubmit(onSubmit)} className=\"form_\">\r\n                    <label>\r\n                        <input\r\n                            {...register(\"fullname\")}\r\n                            type=\"text\"\r\n                            name=\"fullname\"\r\n                            placeholder=\"Họ và Tên\"\r\n                        />\r\n                        <p className=\"form-mess-err\"></p>\r\n                    </label>\r\n\r\n                    <label>\r\n                        <input\r\n                            {...register(\"username\")}\r\n                            type=\"text\"\r\n                            name=\"username\"\r\n                            placeholder=\"Tài khoản đăng nhập\"\r\n                            onChange={(e) => {\r\n                                setValiUsername(!e.target.value);\r\n                            }}\r\n                        />\r\n                        {valiUsername ? (\r\n                            <p className=\"form-mess-err\">\r\n                                Tài khoản không được để trống!\r\n                            </p>\r\n                        ) : (\r\n                            <p className=\"form-mess-err\"></p>\r\n                        )}\r\n                    </label>\r\n\r\n                    <label>\r\n                        <input\r\n                            {...register(\"email\")}\r\n                            type=\"text\"\r\n                            name=\"email\"\r\n                            placeholder=\"Email\"\r\n                            onChange={(e) => {\r\n                                setValiEmail(!validateEmail(e.target.value));\r\n                            }}\r\n                        />\r\n                        {valiEmail ? (\r\n                            <p className=\"form-mess-err\">\r\n                                Định dạng email không đúng!\r\n                            </p>\r\n                        ) : (\r\n                            <p className=\"form-mess-err\"></p>\r\n                        )}\r\n                    </label>\r\n                    <label>\r\n                        <input\r\n                            {...register(\"password\")}\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            placeholder=\"Mật khẩu\"\r\n                            autoComplete=\"on\"\r\n                            onChange={(e) => {\r\n                                setValiPassword(!e.target.value);\r\n                            }}\r\n                        />\r\n                        {valiPassword ? (\r\n                            <p className=\"form-mess-err\">\r\n                                Mật khẩu không được để trống!\r\n                            </p>\r\n                        ) : (\r\n                            <p className=\"form-mess-err\"></p>\r\n                        )}\r\n                    </label>\r\n                    <label>\r\n                        <input\r\n                            {...register(\"rePassword\")}\r\n                            type=\"password\"\r\n                            name=\"rePassword\"\r\n                            placeholder=\"Nhập lại mật khẩu\"\r\n                            autoComplete=\"on\"\r\n                            onChange={(e) => {\r\n                                setValiRePassword(\r\n                                    !checkRePassword(\r\n                                        getValues(\"password\"),\r\n                                        e.target.value\r\n                                    )\r\n                                );\r\n                            }}\r\n                        />\r\n                        {valiRePassword ? (\r\n                            <p className=\"form-mess-err\">\r\n                                Nhập lại mật khẩu không khớp!\r\n                            </p>\r\n                        ) : (\r\n                            <p className=\"form-mess-err\"></p>\r\n                        )}\r\n                    </label>\r\n                    <label className=\"address\">\r\n                        <input\r\n                            {...register(\"address\")}\r\n                            type=\"text\"\r\n                            name=\"address\"\r\n                            placeholder=\"Địa chỉ\"\r\n                        />\r\n                        <p className=\"form-mess-err\"></p>\r\n                    </label>\r\n                    <label className=\"birthday\">\r\n                        <input\r\n                            {...register(\"birthday\")}\r\n                            type=\"text\"\r\n                            name=\"birthday\"\r\n                            placeholder=\"Ngày sinh\"\r\n                        />\r\n                    </label>\r\n                    <button type=\"submit\">Đăng ký</button>\r\n                    <p className=\"form-has-user\">\r\n                        Đã có tài khoản <Link to={LOGIN}>Đăng Nhập ngay</Link>\r\n                    </p>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Register;\r\n","import { message } from \"antd\";\r\nexport function errorAPI(error: any) {\r\n    console.log(\"err___________\", error);\r\n    if (typeof error.response === \"undefined\") {\r\n        message.error(\"Đã có lỗi sảy ra, bạn vui lòng thử lại sau\");\r\n        return;\r\n    }\r\n    message.error(error.response.data.message);\r\n}\r\n","export function validateEmail(email: string) {\r\n    if (!email) return false;\r\n    const re =\r\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n}\r\n\r\nexport function checkRePassword(password: string, repassword: string) {\r\n    if (!password || !repassword) return false;\r\n    return password === repassword;\r\n}\r\n"],"sourceRoot":""}
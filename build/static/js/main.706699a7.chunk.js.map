{"version":3,"sources":["store/const.ts","App.tsx","reportWebVitals.ts","store/reduces/userReducer.ts","store/reduces/index.ts","store/saga/index.ts","store/index.ts","locales/en/publics.ts","locales/en.ts","locales/vi/publics.ts","locales/i18n.ts","locales/vi.ts","index.tsx","router/const.ts","config.ts","store/actions/userAction.ts","api/config.ts","api/repository/UserAPI.ts","api/repository/LocationsAPI.ts","api/repository/BlogAPI.ts","api/repository/NotificationAPI.ts","api/index.ts","api/repository/ImgurAPI.ts","router/index.tsx"],"names":["SET_USER","SET_RES_LOGIN","CLEAR_USER","SET_LOGIN","SET_FRIENDS","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","user","undefined","token","localStorage","getItem","map","userState","state","action","type","friends","reducer","combineReducers","mySaga","all","saga","createSagaMiddleware","store","createStore","applyMiddleware","run","publics","Home","Header","Slider","Logout","en","translation","Back","L","resources","vi","Language","i18n","use","initReactI18next","Backend","LanguageDetector","init","lng","fallbackLng","keySeparator","interpolation","escapeValue","ReactDOM","render","StrictMode","document","getElementById","LOGIN","REGISTER","SEND_RESET_PASSWORD","RESET_PASSWORD","ACTIVATE_USER","HOME","USER_PROFILE","USER_PROFILE_ROUTER","NEW_BLOG","LIST_BLOG","BLOG","BLOG_VIEW","MAP","MESSAGE","MESSAGE_ROUTER","BASE_URL","process","BASE_URL_IMG","KEY_GOOGLE_MAP","IMGUR","IMGUR_TOKEN","setResLogin","setUser","clearUser","setFriends","data","baseURL","config","baseAPI","contentType","instance","axios","create","httpAgent","http","Agent","keepAlive","httpsAgent","https","header","Accept","Authorization","interceptors","request","headers","error","Promise","reject","response","status","AxiosAPI","hasToken","resource","API","login","post","register","getProfile","get","changePassword","activateUser","sendResetPassword","resetPassword","getUsers","getUser","id","option","addFriend","idFriend","unfriend","acceptFriend","getChatUser","getChatMessage","getMessage","getListChat","sendMessage","locations","getListProvinces","getListDistricts","getListWards","blog","getListBlog","getBlog","slug","createBlog","notification","getNotifyForUser","getNotifyNotUser","imgur","uploadImg","APIImgur","Login","React","lazy","Register","PrivateRouter","ActivateUser","SendResetPassword","ResetPassword","WaitingComponent","Component","props","fallback","Routers","exact","path","component","CheckLogin","useState","loading","setLoading","dispatch","useDispatch","useSelector","useEffect","a","res","removeItem","to","pathname","search","location"],"mappings":"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","file":"static/js/main.706699a7.chunk.js","sourcesContent":["export const SET_USER = \"SET_USER\";\r\nexport const SET_RES_LOGIN = \"SET_RES_LOGIN\";\r\nexport const CLEAR_USER = \"CLEAR_USER\";\r\n\r\nexport const SET_LOGIN = \"SET_LOGIN\";\r\n\r\nexport const SET_FRIENDS = \"SET_FRIENDS\";\r\n","import Routers from \"./router\";\nimport \"antd/dist/antd.css\";\nimport \"./App.scss\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Routers />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import { SET_USER, CLEAR_USER, SET_RES_LOGIN, SET_FRIENDS } from \"../const\";\r\nimport { Reducer } from \"redux\";\r\nimport { Action, UserState } from \"../../interface/redux\";\r\n\r\nconst initialState: UserState = {\r\n    user: undefined,\r\n    token: localStorage.getItem(\"token\"),\r\n};\r\n\r\nconst userReduce: Reducer<UserState, Action> = (\r\n    state: UserState = initialState,\r\n    action: Action\r\n): UserState => {\r\n    switch (action.type) {\r\n        case SET_RES_LOGIN:\r\n            return {\r\n                ...state,\r\n                user: action.user,\r\n                token: action.token,\r\n            };\r\n        case SET_USER:\r\n            return {\r\n                ...state,\r\n                user: action.user,\r\n            };\r\n        case CLEAR_USER:\r\n            return {\r\n                ...state,\r\n                user: undefined,\r\n                token: null,\r\n            };\r\n        case SET_FRIENDS:\r\n            return {\r\n                ...state,\r\n                user: state.user\r\n                    ? { ...state.user, friends: action.friends }\r\n                    : undefined,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default userReduce;\r\n","import { combineReducers } from \"redux\";\r\nimport { Action, AppState } from \"../../interface/redux\";\r\nimport { ReducersMapObject } from \"redux\";\r\nimport userReduce from \"./userReducer\";\r\n\r\nconst map: ReducersMapObject<AppState, Action> = {\r\n    userState: userReduce,\r\n};\r\n\r\nconst reducer = combineReducers(map);\r\nexport default reducer;\r\n","// import { all } from \"redux-saga/effects\";\r\nimport { all } from \"typed-redux-saga\";\r\n// import userSaga from \"./userSaga\";\r\nfunction* mySaga() {\r\n    yield all([]);\r\n}\r\n\r\nexport default mySaga;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport reducer from \"./reduces\";\r\nimport createSagaMiddleware from \"@redux-saga/core\";\r\nimport mySaga from \"./saga\";\r\n// import {initStateRedux} from './appstate'\r\nconst saga = createSagaMiddleware();\r\nconst store = createStore(reducer, undefined, applyMiddleware(saga));\r\n\r\nsaga.run(mySaga);\r\n\r\nexport default store;\r\n","const publics = {\r\n    Home: \"Home\",\r\n    Header: \"Header\",\r\n    Slider: \"Slider\",\r\n    Logout: \"Logout\",\r\n};\r\nexport default publics;\r\n","import publics from \"./en/publics\";\r\nconst en = {\r\n    translation: {\r\n        ...publics,\r\n        Back: \"Back\",\r\n        \"Language a\": \"Language\",\r\n        L: \"English\",\r\n    },\r\n};\r\nexport default en;\r\n","const publics = {\r\n    Home: \"Trang chủ\",\r\n    Header: \"Tiêu đề\",\r\n    Slider: \"Thanh trượt\",\r\n    Logout: \"Đăng xuất\",\r\n};\r\nexport default publics;\r\n","import i18n from \"i18next\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport Backend from \"i18next-http-backend\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport en from \"./en\";\r\nimport vi from \"./vi\";\r\ntype Resources = {\r\n    vi: typeof vi;\r\n    en: typeof en;\r\n};\r\n\r\nconst resources: Resources = {\r\n    vi: vi,\r\n    en: en,\r\n};\r\n\r\ni18n.use(initReactI18next)\r\n    .use(Backend)\r\n    .use(LanguageDetector)\r\n    .init({\r\n        resources: resources,\r\n        lng: \"vi\",\r\n        fallbackLng: \"vi\",\r\n        keySeparator: false,\r\n        interpolation: {\r\n            escapeValue: false,\r\n        },\r\n    });\r\n\r\nexport default i18n;\r\n","import publics from \"./vi/publics\";\r\nconst vi = {\r\n    translation: {\r\n        ...publics,\r\n        Back: \"Quay lại\",\r\n        Language: \"Ngôn ngữ\",\r\n        L: \"Tiếng Việt\",\r\n    },\r\n};\r\nexport default vi;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport \"./locales/i18n\";\n// import { Connector } from \"mqtt-react-hooks\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n","export const LOGIN = \"/login\";\r\nexport const REGISTER = \"/register\";\r\nexport const SEND_RESET_PASSWORD = \"/send_reset-password\";\r\nexport const RESET_PASSWORD = \"/reset-password\";\r\nexport const ACTIVATE_USER = \"/activate-user\";\r\nexport const HOME = \"/\";\r\n\r\nexport const PROFILE = \"/user/profile\";\r\nexport const USER_PROFILE = \"/user\";\r\nexport const USER_PROFILE_ROUTER = `${USER_PROFILE}/:id`;\r\nexport const NEW_BLOG = \"/new-blog\";\r\nexport const LIST_BLOG = \"/list-blog\";\r\nexport const BLOG = \"/blog\";\r\nexport const BLOG_VIEW = `${BLOG}/:slug`;\r\nexport const MAP = \"/map\";\r\nexport const MESSAGE = \"/message\";\r\nexport const MESSAGE_ROUTER = `${MESSAGE}/:id`;\r\n","export const BASE_URL =\r\n    process.env.REACT_APP_BASE_URL || \"http://127.0.0.1:8000\";\r\nexport const BASE_URL_IMG =\r\n    process.env.REACT_APP_BASE_URL_IMG || \"http://127.0.0.1:8000\";\r\nexport const KEY_GOOGLE_MAP = process.env.REACT_APP_KEY_GOOGLE_MAP;\r\nexport const MQTT = process.env.REACT_APP_MQTT || \"mqtt://20.212.16.22:1883\";\r\nexport const IMGUR = process.env.REACT_APP_IMGUR;\r\nexport const IMGUR_TOKEN = process.env.REACT_APP_IMGUR_TOKEN;\r\n","import { FriendInterface, UserInterface } from \"../../interface\";\r\nimport { DataLogin } from \"../../interface/api/UserAPI\";\r\nimport { Action } from \"../../interface/redux\";\r\nimport {\r\n    SET_USER,\r\n    CLEAR_USER,\r\n    SET_LOGIN,\r\n    SET_RES_LOGIN,\r\n    SET_FRIENDS,\r\n} from \"../const\";\r\n\r\nexport const setResLogin = (user: UserInterface, token: string): Action => {\r\n    return {\r\n        type: SET_RES_LOGIN,\r\n        user: user,\r\n        token: token,\r\n    };\r\n};\r\nexport const setUser = (user?: UserInterface): Action => {\r\n    return {\r\n        type: SET_USER,\r\n        user: user,\r\n    };\r\n};\r\n\r\nexport const clearUser = (): Action => {\r\n    return {\r\n        type: CLEAR_USER,\r\n    };\r\n};\r\n\r\nexport const setLogin = (data: DataLogin): Action => {\r\n    return {\r\n        type: SET_LOGIN,\r\n        dataLogin: data,\r\n    };\r\n};\r\nexport const setFriends = (data: FriendInterface[]): Action => {\r\n    return {\r\n        type: SET_FRIENDS,\r\n        friends: data,\r\n    };\r\n};\r\n","import axios from \"axios\";\r\nimport http from \"http\";\r\nimport https from \"https\";\r\nimport { AxiosInstance } from \"axios\";\r\nimport { BASE_URL, IMGUR, IMGUR_TOKEN } from \"../config\";\r\n\r\ntype Header = {\r\n    Accept: string;\r\n    \"Content-Type\": string;\r\n    Authorization?: string;\r\n};\r\nconst baseURL = `${BASE_URL}/`;\r\n\r\nfunction config(baseAPI: string, token: string, contentType: string) {\r\n    const instance = axios.create({\r\n        baseURL: baseAPI,\r\n        httpAgent: new http.Agent({ keepAlive: true }),\r\n        httpsAgent: new https.Agent({ keepAlive: true }),\r\n    });\r\n    let header: Header = {\r\n        Accept: \"*/*\",\r\n        \"Content-Type\": contentType,\r\n    };\r\n    if (token) {\r\n        header.Authorization = token;\r\n    }\r\n    instance.interceptors.request.use(\r\n        function (config) {\r\n            config.headers = header;\r\n            return config;\r\n        },\r\n        function (error) {\r\n            return Promise.reject(error);\r\n        }\r\n    );\r\n\r\n    instance.interceptors.response.use(\r\n        function (response) {\r\n            try {\r\n                if (response.status !== 200) return Promise.reject(response);\r\n                return response;\r\n            } catch (error) {\r\n                return Promise.reject(error);\r\n            }\r\n        },\r\n        function (error) {\r\n            return Promise.reject(error);\r\n        }\r\n    );\r\n    return instance;\r\n}\r\n\r\nexport default function AxiosAPI(\r\n    hasToken = false,\r\n    contentType = \"application/json\"\r\n): AxiosInstance {\r\n    const token = hasToken ? `Bearer ${localStorage.getItem(\"token\")}` : \"\";\r\n    return config(baseURL, token, contentType);\r\n}\r\nexport function APIImgur(\r\n    hasToken = false,\r\n    contentType = \"multipart/form-data\"\r\n): AxiosInstance {\r\n    const token = hasToken ? `Client-ID ${IMGUR_TOKEN}` : \"\";\r\n    return config(`${IMGUR}/`, token, contentType);\r\n}\r\n","import AxiosAPI from \"../config\";\r\nimport UserAPI, {\r\n    DataLogin,\r\n    DataRegister,\r\n    DataChangePassword,\r\n    DataActivateUser,\r\n    DataSendResetPassword,\r\n    DataResetPassword,\r\n} from \"../../interface/api/UserAPI\";\r\n\r\nconst resource = \"user\";\r\n\r\nconst register = (data: DataRegister) => {\r\n    return AxiosAPI(false).post(`${resource}/register`, data);\r\n};\r\n\r\nconst activateUser = (data: DataActivateUser) => {\r\n    return AxiosAPI(false).post(`${resource}/active_user`, data);\r\n};\r\n\r\nconst login = (data: DataLogin) => {\r\n    return AxiosAPI(false).post(`${resource}/login`, data);\r\n};\r\n\r\nconst sendResetPassword = (data: DataSendResetPassword) => {\r\n    return AxiosAPI(false).post(`${resource}/send-reset-password`, data);\r\n};\r\n\r\nconst resetPassword = (data: DataResetPassword) => {\r\n    return AxiosAPI(false).post(`${resource}/reset-password`, data);\r\n};\r\n\r\nconst changePassword = (data: DataChangePassword) => {\r\n    return AxiosAPI(true).post(`${resource}/change-password`, data);\r\n};\r\n\r\nconst getProfile = () => {\r\n    return AxiosAPI(true).get(`${resource}/profile`);\r\n};\r\nconst getUsers = () => {\r\n    return AxiosAPI(false).get(`${resource}/list`);\r\n};\r\nconst getUser = (id: String, option: string) => {\r\n    return AxiosAPI(false).get(`${resource}/user/${id}?option=${option}`);\r\n};\r\nconst addFriend = (idFriend: String) => {\r\n    return AxiosAPI(true).post(`${resource}/add-friend`, {\r\n        idFriend: idFriend,\r\n    });\r\n};\r\nconst unfriend = (idFriend: String) => {\r\n    return AxiosAPI(true).post(`${resource}/unfriend`, {\r\n        idFriend: idFriend,\r\n    });\r\n};\r\nconst acceptFriend = (idFriend: String) => {\r\n    return AxiosAPI(true).post(`${resource}/accep-friend`, {\r\n        idFriend: idFriend,\r\n    });\r\n};\r\nconst getChatUser = (idFriend: string) => {\r\n    return AxiosAPI(true).get(`${resource}/chat/${idFriend}`);\r\n};\r\nconst getChatMessage = (idFriend: string) => {\r\n    return AxiosAPI(true).get(`${resource}/message-chat/${idFriend}`);\r\n};\r\nconst getMessage = (idFriend: string) => {\r\n    return AxiosAPI(true).get(`${resource}/message/${idFriend}`);\r\n};\r\nconst getListChat = () => {\r\n    return AxiosAPI(true).get(`${resource}/chats`);\r\n};\r\nconst sendMessage = (id: string, data: { content: string }) => {\r\n    return AxiosAPI(true).post(`${resource}/message/${id}`, data);\r\n};\r\nconst userAPI: UserAPI = {\r\n    login,\r\n    register,\r\n    getProfile,\r\n    changePassword,\r\n    activateUser,\r\n    sendResetPassword,\r\n    resetPassword,\r\n    getUsers,\r\n    getUser,\r\n    addFriend,\r\n    unfriend,\r\n    acceptFriend,\r\n    getChatUser,\r\n    getChatMessage,\r\n    getMessage,\r\n    getListChat,\r\n    sendMessage,\r\n};\r\nexport default userAPI;\r\n","import LocationsAPI from \"../../interface/api/LocationsAPI\";\r\nimport AxiosAPI from \"../config\";\r\nconst resource = \"api\";\r\nconst getListProvinces = () => {\r\n    return AxiosAPI(false).get(`${resource}/locations`);\r\n};\r\nconst getListDistricts = (id: number) => {\r\n    return AxiosAPI(false).get(`${resource}/locations/${id}`);\r\n};\r\nconst getListWards = (id: number) => {\r\n    return AxiosAPI(false).get(`${resource}/district/${id}`);\r\n};\r\n\r\nconst locationsAPI: LocationsAPI = {\r\n    getListProvinces: getListProvinces,\r\n    getListDistricts: getListDistricts,\r\n    getListWards: getListWards,\r\n};\r\nexport default locationsAPI;\r\n","import BlogAPI, { DataCreateBlog } from \"../../interface/api/BlogAPI\";\r\nimport AxiosAPI from \"../config\";\r\nconst resource = \"api\";\r\nconst getBlog = (slug: string) => {\r\n    return AxiosAPI(false).get(`${resource}/blog/${slug}`);\r\n};\r\nconst createBlog = (data: DataCreateBlog) => {\r\n    return AxiosAPI(true).post(`${resource}/blog`, data);\r\n};\r\nconst getListBlog = () => {\r\n    return AxiosAPI(false).get(`${resource}/blog`);\r\n};\r\n\r\nconst blogAPI: BlogAPI = {\r\n    getListBlog: getListBlog,\r\n    getBlog: getBlog,\r\n    createBlog: createBlog,\r\n};\r\nexport default blogAPI;\r\n","import NotificationAPI from \"../../interface/api/NotificationAPI\";\r\nimport AxiosAPI from \"../config\";\r\nconst resource = \"notify\";\r\nconst getNotifyForUser = () => {\r\n    return AxiosAPI(true).get(`${resource}/list-user`);\r\n};\r\nconst getNotifyNotUser = () => {\r\n    return AxiosAPI(false).get(`${resource}/lists`);\r\n};\r\n\r\nconst notificationAPI: NotificationAPI = {\r\n    getNotifyForUser,\r\n    getNotifyNotUser,\r\n};\r\nexport default notificationAPI;\r\n","import Api from \"../interface/api\";\r\nimport userAPI from \"./repository/UserAPI\";\r\nimport locationsAPI from \"./repository/LocationsAPI\";\r\nimport blogAPI from \"./repository/BlogAPI\";\r\nimport notificationAPI from \"./repository/NotificationAPI\";\r\nimport imgurAPI from \"./repository/ImgurAPI\";\r\nconst API: Api = {\r\n    user: userAPI,\r\n    locations: locationsAPI,\r\n    blog: blogAPI,\r\n    notification: notificationAPI,\r\n    imgur: imgurAPI,\r\n};\r\n\r\nexport default API;\r\n","import ImgurAPI from \"../../interface/api/ImgurAPI\";\r\nimport { APIImgur } from \"../config\";\r\nconst resource = \"3\";\r\nconst uploadImg = (data: FormData) => {\r\n    return APIImgur(true).post(`${resource}/image`, data);\r\n};\r\nconst imgurAPI: ImgurAPI = {\r\n    uploadImg,\r\n};\r\nexport default imgurAPI;\r\n","import React, { Suspense, useEffect, useState } from \"react\";\r\nimport {\r\n    LOGIN,\r\n    REGISTER,\r\n    HOME,\r\n    ACTIVATE_USER,\r\n    SEND_RESET_PASSWORD,\r\n    RESET_PASSWORD,\r\n} from \"./const\";\r\nimport {\r\n    Route,\r\n    Redirect,\r\n    Switch,\r\n    BrowserRouter as Router,\r\n} from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n// import Home from '../home/content/home';\r\nimport \"./router.scss\";\r\nimport { AppState } from \"../interface/redux\";\r\nimport { UserInterface } from \"../interface\";\r\nimport API from \"../api\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport { clearUser, setUser } from \"../store/actions/userAction\";\r\nconst Login = React.lazy(() => import(\"../screens/login\"));\r\nconst Register = React.lazy(() => import(\"../screens/register\"));\r\nconst PrivateRouter = React.lazy(() => import(\"./PrivateRouter\"));\r\nconst ActivateUser = React.lazy(() => import(\"../screens/activate-user\"));\r\nconst SendResetPassword = React.lazy(\r\n    () => import(\"../screens/send-reset-password\")\r\n);\r\nconst ResetPassword = React.lazy(() => import(\"../screens/reset-password\"));\r\nexport function WaitingComponent(Component: any) {\r\n    return (props: any) => (\r\n        <Suspense fallback={<div>loading</div>}>\r\n            <Component {...props} />\r\n        </Suspense>\r\n    );\r\n}\r\n\r\nconst Routers = () => {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path={LOGIN} component={WaitingComponent(Login)} />\r\n                <Route\r\n                    exact\r\n                    path={REGISTER}\r\n                    component={WaitingComponent(Register)}\r\n                />\r\n                <Route\r\n                    exact\r\n                    path={ACTIVATE_USER}\r\n                    component={WaitingComponent(ActivateUser)}\r\n                />\r\n                <Route\r\n                    exact\r\n                    path={SEND_RESET_PASSWORD}\r\n                    component={WaitingComponent(SendResetPassword)}\r\n                />\r\n                <Route\r\n                    exact\r\n                    path={RESET_PASSWORD}\r\n                    component={WaitingComponent(ResetPassword)}\r\n                />\r\n                <CheckLogin />\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\nexport default Routers;\r\n\r\nconst CheckLogin = (props: any) => {\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n    const dispatch = useDispatch();\r\n    const token = useSelector((state: AppState) => state.userState.token);\r\n    useEffect(() => {\r\n        async function getProfile() {\r\n            if (token) {\r\n                try {\r\n                    const res: AxiosResponse<UserInterface> =\r\n                        await API.user.getProfile();\r\n\r\n                    dispatch(setUser(res.data));\r\n                } catch (e) {\r\n                    dispatch(clearUser());\r\n                    localStorage.removeItem(\"token\");\r\n                }\r\n            }\r\n        }\r\n        getProfile();\r\n        setLoading(false);\r\n    }, [token, dispatch]);\r\n    if (loading) {\r\n        return <div>Loading...!</div>;\r\n    }\r\n    if (token)\r\n        return (\r\n            <Route path={HOME} component={WaitingComponent(PrivateRouter)} />\r\n        );\r\n    else\r\n        return (\r\n            <Redirect\r\n                to={{\r\n                    pathname: LOGIN,\r\n                    search: `?next=${props.location.pathname}${props.location.search}`,\r\n                }}\r\n            />\r\n        );\r\n};\r\n"],"sourceRoot":""}
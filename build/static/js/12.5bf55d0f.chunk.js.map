{"version":3,"sources":["components/Error.tsx","utils/validate.ts","screens/profile/Avatar.tsx","components/Modal.tsx","screens/profile/EditProfile.tsx","screens/profile/function.ts","components/ValidateNotification.tsx","screens/profile/ChangePassword.tsx","config/const.ts","screens/profile/UserAction.tsx","screens/profile/index.tsx"],"names":["errorAPI","error","console","log","response","message","data","validateEmail","email","test","String","toLowerCase","checkRePassword","password","repassword","Avatar","props","isUser","user","token","dispatch","useDispatch","useState","setLoading","className","src","BASE_URL_IMG","avatar","name","listType","showUploadList","action","BASE_URL","beforeUpload","file","check","includes","type","headers","Authorization","onChange","info","status","setUser","undefined","success","fullname","Modal","children","show","onClose","style","display","onClick","EditProfile","handleSubmit","useForm","a","onSubmit","setShowValidate","reset","old_password","re_password","checkRePass","oldPassword","rePassword","API","changePassword","idFriend","setListFriend","addFriend","res","friends","unFriend","unfriend","acceptFriend","getIdMessage","getChatUser","_id","ValidateNotification","ChangePassword","register","showValidate","htmlFor","id","required","STT_FRIEND","UserAction","friendList","goToMessage","friend","filter","f","length","Profile","match","params","history","useHistory","showEdit","setShowEdit","profile","setProfile","idUser","useSelector","state","userState","useEffect","getUser","fetchUser","messId","push","MESSAGE","address","birthday","setFriends"],"mappings":"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","file":"static/js/12.5bf55d0f.chunk.js","sourcesContent":["import { message } from \"antd\";\r\nexport function errorAPI(error: any) {\r\n    console.log(\"err___________\", error);\r\n    if (typeof error.response === \"undefined\") {\r\n        message.error(\"Đã có lỗi sảy ra, bạn vui lòng thử lại sau\");\r\n        return;\r\n    }\r\n    message.error(error.response.data.message);\r\n}\r\n","export function validateEmail(email: string) {\r\n    if (!email) return false;\r\n    const re =\r\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n}\r\n\r\nexport function checkRePassword(password: string, repassword: string) {\r\n    if (!password || !repassword) return false;\r\n    return password === repassword;\r\n}\r\n","import { useState } from \"react\";\r\nimport { UserInterface } from \"../../interface\";\r\nimport { Image, message, Upload } from \"antd\";\r\n// import { LoadingOutlined } from \"@ant-design/icons\";\r\nimport ImgCrop from \"antd-img-crop\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setUser } from \"../../store/actions/userAction\";\r\nimport ChangeCircleOutlinedIcon from \"@mui/icons-material/ChangeCircleOutlined\";\r\nimport { BASE_URL, BASE_URL_IMG } from \"../../config\";\r\ntype propsAvatar = {\r\n    user?: UserInterface;\r\n    token?: string | null;\r\n    isUser?: boolean;\r\n};\r\nconst Avatar = (props: propsAvatar) => {\r\n    const { isUser, user, token } = props;\r\n\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n\r\n    const beforeUpload = (file: File) => {\r\n        const type = [\"image/jpeg\", \"image/png\"];\r\n        const check = type.includes(file.type);\r\n        if (!check) {\r\n            message.error(\"Không hỗ trợ loại file này\");\r\n        }\r\n        return check;\r\n    };\r\n    const changeAvatar = (info: any) => {\r\n        if (info.file.status === \"uploading\") {\r\n            setLoading(true);\r\n            return;\r\n        }\r\n        if (info.file.status === \"done\") {\r\n            dispatch(\r\n                setUser(\r\n                    user\r\n                        ? { ...user, avatar: info.file.response.avatar }\r\n                        : undefined\r\n                )\r\n            );\r\n            setLoading(false);\r\n            message.success(\"Cập nhật ảnh đại diện thành công\");\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"avatar\">\r\n            <div className=\"avatar-img\">\r\n                <Image\r\n                    className=\"avatar-image\"\r\n                    src={`${BASE_URL_IMG}${user?.avatar}`}\r\n                />\r\n                {isUser ? (\r\n                    <ImgCrop>\r\n                        <Upload\r\n                            name=\"avatar\"\r\n                            listType=\"picture-card\"\r\n                            className={\r\n                                loading ? \"change-avatar\" : \"change-avatar\"\r\n                            }\r\n                            showUploadList={false}\r\n                            action={`${BASE_URL}/user/avatar`}\r\n                            beforeUpload={beforeUpload}\r\n                            headers={{\r\n                                Authorization: \"Bearer \" + token,\r\n                            }}\r\n                            onChange={changeAvatar}\r\n                        >\r\n                            {/* {loading ? (\r\n                                <span className=\"avatar-uploader-button_loading\">\r\n                                    <LoadingOutlined />\r\n                                </span>\r\n                            ) : (\r\n                                <span className=\"avatar-uploader-button\">\r\n                                    Thay đổi\r\n                                </span>\r\n                            )} */}\r\n                            <ChangeCircleOutlinedIcon />\r\n                        </Upload>\r\n                    </ImgCrop>\r\n                ) : (\r\n                    <></>\r\n                )}\r\n            </div>\r\n            <p className=\"fullname\">{user?.fullname}</p>\r\n        </div>\r\n    );\r\n};\r\nexport default Avatar;\r\n","import React from \"react\";\r\n\r\ntype propsModal = {\r\n    children: any;\r\n    show: boolean;\r\n    onClose: any;\r\n};\r\n\r\nconst Modal = (props: propsModal) => {\r\n    const { children, show, onClose } = props;\r\n    return (\r\n        <div className={show ? \"modal\" : \"modal-none\"}>\r\n            <div className={show ? \"modal-children\" : \"modal-children-none\"}>\r\n                {children}\r\n            </div>\r\n            <div\r\n                style={{ display: show ? \"block\" : \"none\" }}\r\n                onClick={onClose}\r\n                className=\"modal-close\"\r\n            ></div>\r\n        </div>\r\n    );\r\n};\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n// import { useSelector } from \"react-redux\";\r\n// import { AppState } from \"../../interface/redux\";\r\nconst EditProfile = () => {\r\n    // const user = useSelector((state: AppState) => state.userState.user);\r\n    const { /*register,*/ handleSubmit } = useForm();\r\n    async function editProfile(data: any) {\r\n        console.log(data);\r\n    }\r\n    return (\r\n        <form\r\n            className=\"form-edit_profile\"\r\n            onSubmit={handleSubmit(editProfile)}\r\n        >\r\n            {/* <div className=\"flex-row\">\r\n                <div\r\n                    className=\"form-edit-profile-label\"\r\n                    style={{ marginRight: \"10px\" }}\r\n                >\r\n                    <label htmlFor=\"fullname\">Họ-Tên:</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"last_name\"\r\n                        defaultValue={user?.fullname ?? \"\"}\r\n                        {...register(\"fullname\", {\r\n                            required: true,\r\n                        })}\r\n                    />\r\n                </div>\r\n                <div\r\n                    className=\"form-edit-profile-label\"\r\n                    style={{ marginLeft: \"10px\" }}\r\n                >\r\n                   \r\n            </div>\r\n\r\n            <div className=\"form-edit-profile-label\">\r\n                <label htmlFor=\"email\">Email:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"email\"\r\n                    defaultValue={user?.email ?? \"\"}\r\n                    {...register(\"email\", {\r\n                        required: true,\r\n                    })}\r\n                />\r\n            </div>\r\n            <div className=\"form-edit-profile-label\">\r\n                <label htmlFor=\"phone\">Số điện thoại:</label>\r\n                <input\r\n                    type=\"number\"\r\n                    id=\"phone\"\r\n                    defaultValue={user?.phone ?? \"\"}\r\n                    {...register(\"phone\")}\r\n                />\r\n            </div>\r\n            <div className=\"form-edit-profile-label\">\r\n                <label htmlFor=\"address\">Địa chỉ:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"address\"\r\n                    defaultValue={user?.address ?? \"\"}\r\n                    {...register(\"address\")}\r\n                />\r\n            </div>\r\n            <div className=\"form-edit-profile-label\">\r\n                <label htmlFor=\"birthday\">Ngày sinh:</label>\r\n                <input\r\n                    type=\"date\"\r\n                    id=\"birthday\"\r\n                    defaultValue={user?.birthday ?? \"\"}\r\n                    {...register(\"birthday\")}\r\n                />\r\n            </div>\r\n            <div className=\"form-edit-profile-label\">\r\n                <label>Giới tính:</label>\r\n                <input\r\n                    type=\"radio\"\r\n                    id=\"male\"\r\n                    value=\"1\"\r\n                    {...register(\"gender\")}\r\n                    defaultChecked={user?.gender === 1 ? true : false}\r\n                />\r\n                <label className=\"label-radio\" htmlFor=\"male\">\r\n                    Nam\r\n                </label>\r\n                <input\r\n                    type=\"radio\"\r\n                    id=\"female\"\r\n                    value=\"2\"\r\n                    {...register(\"gender\")}\r\n                    defaultChecked={user?.gender === 2 ? true : false}\r\n                />\r\n                <label className=\"label-radio\" htmlFor=\"female\">\r\n                    Nữ\r\n                </label>\r\n                <input\r\n                    type=\"radio\"\r\n                    id=\"other\"\r\n                    value=\"0\"\r\n                    {...register(\"gender\")}\r\n                    defaultChecked={user?.gender === 0 ? true : false}\r\n                />\r\n                <label className=\"label-radio\" htmlFor=\"other\">\r\n                    Khác\r\n                </label>\r\n            </div> */}\r\n            <div className=\"btn-submit\">\r\n                <button type=\"submit\">Chỉnh sửa</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\nexport default EditProfile;\r\n","import { checkRePassword } from \"../../utils/validate\";\r\nimport API from \"../../api\";\r\nimport { message } from \"antd\";\r\nimport { errorAPI } from \"../../components/Error\";\r\nimport { FriendInterface } from \"../../interface\";\r\nexport async function changePassword(\r\n    data: {\r\n        old_password: string;\r\n        password: string;\r\n        re_password: string;\r\n    },\r\n    setShowValidate: any,\r\n    reset: any\r\n) {\r\n    const { old_password, password, re_password } = data;\r\n    const checkRePass = checkRePassword(password, re_password);\r\n    setShowValidate({\r\n        oldPassword: !old_password,\r\n        password: !password,\r\n        rePassword: !re_password,\r\n        checkRePassword: !checkRePass,\r\n    });\r\n    if (old_password && checkRePass) {\r\n        try {\r\n            await API.user.changePassword({ old_password, password });\r\n            message.success(\"Đổi mật khẩu thành công!\");\r\n            reset({ old_password: \"\", password: \"\", re_password: \"\" });\r\n        } catch (err) {\r\n            errorAPI(err);\r\n        }\r\n    }\r\n}\r\nexport async function addFriend(\r\n    idFriend: string,\r\n    setListFriend: (friends: FriendInterface[]) => void\r\n) {\r\n    try {\r\n        const res = await API.user.addFriend(idFriend);\r\n        setListFriend(res.data.friends);\r\n    } catch (e) {\r\n        errorAPI(e);\r\n    }\r\n}\r\nexport async function unFriend(\r\n    idFriend: string,\r\n    setListFriend: (friends: FriendInterface[]) => void\r\n) {\r\n    try {\r\n        const res = await API.user.unfriend(idFriend);\r\n        setListFriend(res.data.friends);\r\n    } catch (e) {\r\n        errorAPI(e);\r\n    }\r\n}\r\nexport async function acceptFriend(\r\n    idFriend: string,\r\n    setListFriend: (friends: FriendInterface[]) => void\r\n) {\r\n    console.log(\"acccc\");\r\n\r\n    try {\r\n        const res = await API.user.acceptFriend(idFriend);\r\n        setListFriend(res.data.friends);\r\n    } catch (e) {\r\n        errorAPI(e);\r\n    }\r\n}\r\n\r\nexport async function getIdMessage(idFriend: string) {\r\n    try {\r\n        const res = await API.user.getChatUser(idFriend);\r\n        return res.data._id;\r\n    } catch (e) {\r\n        errorAPI(e);\r\n    }\r\n    return null;\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport \"./component.scss\";\r\ntype propsValiNotify = {\r\n    show: boolean;\r\n    message: string;\r\n};\r\nconst ValidateNotification = (props: propsValiNotify) => {\r\n    const { show, message } = props;\r\n    return show ? (\r\n        <p className=\"notification-validate\">{message}</p>\r\n    ) : (\r\n        <Fragment />\r\n    );\r\n};\r\nexport default ValidateNotification;\r\n","import { changePassword } from \"./function\";\r\nimport React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport ValidateNotification from \"../../components/ValidateNotification\";\r\n\r\nconst ChangePassword = () => {\r\n    const { register, handleSubmit, reset } = useForm();\r\n    const [showValidate, setShowValidate] = useState({\r\n        oldPassword: false,\r\n        password: false,\r\n        rePassword: false,\r\n        checkRePassword: false,\r\n    });\r\n    return (\r\n        <form\r\n            onSubmit={handleSubmit((data: any) =>\r\n                changePassword(data, setShowValidate, reset)\r\n            )}\r\n        >\r\n            <div className=\"flex-column old-password\">\r\n                <label htmlFor=\"old_password\">Mật khẩu cũ:</label>\r\n                <input\r\n                    type=\"password\"\r\n                    id=\"old_password\"\r\n                    {...register(\"old_password\", {\r\n                        required: true,\r\n                    })}\r\n                />\r\n                <ValidateNotification\r\n                    show={showValidate.oldPassword}\r\n                    message={\"Mật khẩu cũ không được để trống\"}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"flex-row\">\r\n                <div className=\"flex-column new-password\">\r\n                    <label htmlFor=\"password\">Mật khẩu mới:</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        {...register(\"password\", {\r\n                            required: true,\r\n                        })}\r\n                    />\r\n                    <ValidateNotification\r\n                        show={showValidate.password}\r\n                        message={\"Mật khẩu không được để trống\"}\r\n                    />\r\n                </div>\r\n                <div className=\"flex-column re-new-password\">\r\n                    <label htmlFor=\"re_password\">Nhập lại mật khẩu:</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        id=\"re_password\"\r\n                        {...register(\"re_password\", {\r\n                            required: true,\r\n                        })}\r\n                    />\r\n                    <ValidateNotification\r\n                        show={showValidate.rePassword}\r\n                        message={\"Vui lòng nhập lại mật khẩu\"}\r\n                    />\r\n                    <ValidateNotification\r\n                        show={showValidate.checkRePassword}\r\n                        message={\"Nhập lại mật khẩu không đúng\"}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"btn-submit-change-password\">\r\n                <button type=\"submit\">Đổi mật khẩu</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\nexport default ChangePassword;\r\n","export const STT_FRIEND = {\r\n    REQUEST_INVITE: 0, //gửi lời mời\r\n    WAIT_CONFIRM: 1, //chờ xác nhận\r\n    FRIENDER: 2, //đã kết bạn\r\n};\r\n","import { STT_FRIEND } from \"../../config/const\";\r\nimport { FriendInterface } from \"../../interface\";\r\nimport { acceptFriend, addFriend, unFriend } from \"./function\";\r\n\r\ntype PropsUserAction = {\r\n    _id: string;\r\n    friendList?: FriendInterface[];\r\n    setListFriend: (friends: FriendInterface[]) => void;\r\n    goToMessage: () => Promise<void>;\r\n};\r\nconst UserAction = (props: PropsUserAction) => {\r\n    const { _id, friendList, setListFriend, goToMessage } = props;\r\n    // const [friend, setFriends] = useState(\r\n    //     user?.friends?.filter((f) => f.idFriend === _id)\r\n    // );\r\n    const friend = friendList?.filter((f) => f.idFriend === _id);\r\n    console.log(\"id_\", _id);\r\n    console.log(\"fr\", friend);\r\n    // useEffect(() => {\r\n    //     setFriends(user?.friends?.filter((f) => f.idFriend === _id));\r\n    // }, [user, _id]);\r\n    if (friend?.length) {\r\n        if (friend[0].status === STT_FRIEND.REQUEST_INVITE) {\r\n            return (\r\n                <>\r\n                    <button\r\n                        onClick={() => unFriend(_id, setListFriend)}\r\n                        className=\"bg-red-800 border-red-800 text-white\"\r\n                    >\r\n                        Hủy kết bạn\r\n                    </button>\r\n                </>\r\n            );\r\n        }\r\n        if (friend[0].status === STT_FRIEND.WAIT_CONFIRM) {\r\n            return (\r\n                <>\r\n                    <button\r\n                        onClick={() => acceptFriend(_id, setListFriend)}\r\n                        className=\"bg-green-700 border-gray-500 text-white mr-5\"\r\n                    >\r\n                        Chấp nhận lời mời kết bạn\r\n                    </button>\r\n                    <button\r\n                        onClick={() => unFriend(_id, setListFriend)}\r\n                        className=\"bg-red-800 border-red-800 text-white\"\r\n                    >\r\n                        Hủy\r\n                    </button>\r\n                </>\r\n            );\r\n        } else\r\n            return (\r\n                <>\r\n                    <button\r\n                        onClick={goToMessage}\r\n                        className=\"bg-yellow-400 broder-yellow-400\"\r\n                    >\r\n                        Nhắn tin\r\n                    </button>\r\n                    <button\r\n                        onClick={() => unFriend(_id, setListFriend)}\r\n                        className=\"bg-red-800 border-red-800 text-white\"\r\n                    >\r\n                        Hủy kết bạn\r\n                    </button>\r\n                </>\r\n            );\r\n    } else {\r\n        return (\r\n            <>\r\n                <button\r\n                    onClick={() => addFriend(_id, setListFriend)}\r\n                    className=\"bg-blue-400 border-blue-400 text-white\"\r\n                >\r\n                    Kết bạn\r\n                </button>\r\n            </>\r\n        );\r\n    }\r\n};\r\nexport default UserAction;\r\n","import \"./profile.scss\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppState } from \"../../interface/redux\";\r\nimport Avatar from \"./Avatar\";\r\nimport Modal from \"../../components/Modal\";\r\nimport EditProfile from \"./EditProfile\";\r\nimport { FriendInterface, UserInterface } from \"../../interface\";\r\nimport ChangePassword from \"./ChangePassword\";\r\nimport { errorAPI } from \"../../components/Error\";\r\nimport API from \"../../api\";\r\nimport UserAction from \"./UserAction\";\r\nimport { setFriends } from \"../../store/actions/userAction\";\r\nimport { getIdMessage } from \"./function\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { MESSAGE } from \"../../router/const\";\r\n\r\nconst Profile = (props: any) => {\r\n    const _id = props.match.params.id;\r\n    const history = useHistory();\r\n    const [showEdit, setShowEdit] = useState<boolean>(false);\r\n    const [profile, setProfile] = useState<UserInterface | undefined>();\r\n    const idUser = useSelector((state: AppState) => state.userState.user?._id);\r\n    const user = useSelector((state: AppState) => state.userState.user);\r\n    const friendList = useSelector(\r\n        (state: AppState) => state.userState.user?.friends\r\n    );\r\n    const token = useSelector((state: AppState) => state.userState.token);\r\n    console.log(\"user\", props.match.params.id);\r\n\r\n    useEffect(() => {\r\n        async function fetchUser() {\r\n            if (_id === idUser) {\r\n                //user\r\n                setProfile(user);\r\n            } else {\r\n                //khách\r\n                try {\r\n                    const res = await API.user.getUser(_id, \"\");\r\n                    setProfile(res.data);\r\n                } catch (e) {\r\n                    errorAPI(e);\r\n                }\r\n            }\r\n        }\r\n        fetchUser();\r\n    }, [_id, idUser, user]);\r\n    const dispatch = useDispatch();\r\n    function setListFriend(friends: FriendInterface[]) {\r\n        dispatch(setFriends(friends));\r\n    }\r\n    async function goToMessage() {\r\n        const messId = await getIdMessage(_id);\r\n        if (messId) {\r\n            history.push(`${MESSAGE}/${messId}`);\r\n        }\r\n    }\r\n    // const friend = user?.friends?.filter((f) => f._id === _id);\r\n    return (\r\n        <div className=\"profile\">\r\n            <div className=\"show-profile display-flex\">\r\n                <div className=\"left center\">\r\n                    <Avatar\r\n                        isUser={_id === idUser}\r\n                        user={profile}\r\n                        token={token}\r\n                    />\r\n                </div>\r\n                <div className=\"right\">\r\n                    <div className=\"right-top\">\r\n                        <div className=\"display-flex\">\r\n                            <p className=\"laber-profile\">Họ và Tên: </p>\r\n                            <p>{profile?.fullname}</p>\r\n                        </div>\r\n                        <div className=\"display-flex\">\r\n                            <p className=\"laber-profile\">Email: </p>\r\n                            <p>{profile?.email}</p>\r\n                        </div>\r\n                        {/* <div className=\"display-flex\">\r\n                            <p className=\"laber-profile\">Số điện thoại: </p>\r\n                            <p>{user?.phone}</p>\r\n                        </div> */}\r\n                        <div className=\"display-flex\">\r\n                            <p className=\"laber-profile\">Địa chỉ: </p>\r\n                            <p>{profile?.address}</p>\r\n                        </div>\r\n                        <div className=\"display-flex\">\r\n                            <p className=\"laber-profile\">ngày sinh: </p>\r\n                            <p>{profile?.birthday}</p>\r\n                        </div>\r\n                        {/* <div className=\"display-flex\">\r\n                            <p className=\"laber-profile\">Giới tính: </p>\r\n                            <p>\r\n                                {user?.gender === 1\r\n                                    ? \"Nam\"\r\n                                    : user?.gender === 2\r\n                                    ? \"Nữ\"\r\n                                    : \"Khác\"}\r\n                            </p>\r\n                        </div> */}\r\n                        {idUser === _id ? (\r\n                            <div className=\"btn-edit-profile\">\r\n                                <button onClick={() => setShowEdit(true)}>\r\n                                    Chỉnh sửa thông tin\r\n                                </button>\r\n                            </div>\r\n                        ) : (\r\n                            <></>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"right-bottom flex-1\">\r\n                        {idUser === _id ? (\r\n                            <ChangePassword />\r\n                        ) : (\r\n                            <UserAction\r\n                                _id={_id}\r\n                                friendList={friendList}\r\n                                setListFriend={setListFriend}\r\n                                goToMessage={goToMessage}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Modal show={showEdit} onClose={() => setShowEdit(false)}>\r\n                <EditProfile />\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\nexport default Profile;\r\n"],"sourceRoot":""}